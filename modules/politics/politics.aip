% prolog

train_prefix('{self_address:L} ').

macro(en, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdePresidentOfTheUnitedStatesOfAmerica), rdfsLabel(PERSON, en, LABEL).
macro(de, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdePresidentOfTheUnitedStatesOfAmerica), rdfsLabel(PERSON, de, LABEL).

macro(en, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdePresidentOfGermany), rdfsLabel(PERSON, en, LABEL).
macro(de, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdePresidentOfGermany), rdfsLabel(PERSON, de, LABEL).

macro(en, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdeFederalChancellorOfGermany), rdfsLabel(PERSON, en, LABEL).
macro(de, known_politicians, LABEL) :- wdpdPositionHeld (PERSON, wdeFederalChancellorOfGermany), rdfsLabel(PERSON, de, LABEL).

%
% US presidents
%

is_us_president(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdePresidentOfTheUnitedStatesOfAmerica), 
    not(wdpqEndTime(OFFICE_STMT, _)).

was_us_president(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdePresidentOfTheUnitedStatesOfAmerica).

% person_political_status(PERSON, STATUS) :- and(was_us_president(PERSON), not(is_us_president(PERSON)), is(STATUS, former_us_president)).
% person_political_status(PERSON, STATUS) :- and(is_us_president(PERSON), is(STATUS, current_us_president)).

answer_info_human(C, en, HUMAN) :-
    is_us_president(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he the current US President?")
    else
        say(C, "Isn't she the current US President?")
    endif.
answer_info_human(C, de, HUMAN) :-
    is_us_president(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Ist der nicht der US Präsident?")
    else
        say(C, "Ist sie nicht die US Präsidentin?.")
    endif.

answer_info_human(C, en, HUMAN) :-
    was_us_president(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he a former US President?")
    else
        say(C, "Isn't she a former US President?")
    endif.
answer_info_human(C, de, HUMAN) :-
    was_us_president(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "War der nicht mal US Präsident?")
    else
        say(C, "War sie nicht mal US Präsidentin?.")
    endif.

test(en, t0000) :-
    "Computer, do you know Donald Trump?",
    "Isn't he the current US President".

test(de, t0001) :-
    "Computer, kennst du eigentlich Donald Trump?",
    "Ist der nicht der US Präsident?".

test(en, t0002) :-
    "Computer, who is Ronald Reagan?",
    "Isn't he a former US President?".

test(de, t0003) :-
    "Computer, wer ist Ronald Reagan?",
    "War der nicht mal US Präsident?".

%
% german chancellors
%

is_german_chancellor(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdeFederalChancellorOfGermany), 
    not(wdpqEndTime(OFFICE_STMT, _)).

was_german_chancellor(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdeFederalChancellorOfGermany).

answer_info_human(C, en, HUMAN) :-
    is_german_chancellor(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he the current German Chancellor?")
    else
        say(C, "Isn't she the current German Chancellor?")
    endif.
answer_info_human(C, de, HUMAN) :-
    is_german_chancellor(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Ist der nicht der Bundeskanzelr?")
    else
        say(C, "Ist sie nicht die Bundeskanzlerin?.")
    endif.

answer_info_human(C, en, HUMAN) :-
    was_german_chancellor(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he a former German Chancellor?")
    else
        say(C, "Isn't she a former German Chancellor?")
    endif.
answer_info_human(C, de, HUMAN) :-
    was_german_chancellor(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "War der nicht mal Bundeskanzler?")
    else
        say(C, "War sie nicht mal Bundeskanzlerin?.")
    endif.

test(en, t0004) :-
    "Computer, do you know Angela Merkel?",
    "Isn't she the current German Chancellor?".

test(de, t0005) :-
    "Computer, kennst du eigentlich Angela Merkel?",
    "Ist sie nicht die Bundeskanzlerin?".

test(en, t0006) :-
    "Computer, who is Helmut Kohl?",
    "Isn't he a former German Chancellor?".

test(de, t0007) :-
    "Computer, wer ist Helmut Kohl?",
    "War der nicht mal Bundeskanzler?".

%
% german presidents
%

is_german_president(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdePresidentOfGermany), 
    not(wdpqEndTime(OFFICE_STMT, _)).

was_german_president(PERSON) :- 
    wdpPositionHeld(PERSON, OFFICE_STMT), 
    wdpsPositionHeld(OFFICE_STMT, wdePresidentOfGermany).

answer_info_human(C, en, HUMAN) :-
    is_german_president(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he the current German President?")
    else
        say(C, "Isn't she the current German President?")
    endif.
answer_info_human(C, de, HUMAN) :-
    is_german_president(HUMAN),
    r_score(C, 200.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Ist der nicht der Bundespräsident?")
    else
        say(C, "Ist sie nicht die Bundespräsidentin?.")
    endif.

answer_info_human(C, en, HUMAN) :-
    was_german_president(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "Isn't he a former German President?")
    else
        say(C, "Isn't she a former German President?")
    endif.
answer_info_human(C, de, HUMAN) :-
    was_german_president(HUMAN),
    r_score(C, 150.0),
    set(C:context|topic, wdePolitics),

    if is_male(HUMAN) then
        say(C, "War der nicht mal Bundespräsident?")
    else
        say(C, "War sie nicht mal Bundespräsidentin?.")
    endif.

test(en, t0008) :-
    "Computer, do you know Frank-Walter Steinmeier?",
    "Isn't he the current German President?".

test(de, t0009) :-
    "Computer, kennst du eigentlich Frank-Walter Steinmeier?",
    "Ist der nicht der Bundespräsident?".

test(en, t0010) :-
    "Computer, who is Joachim Gauck?",
    "Isn't he a former German President?".

test(de, t0011) :-
    "Computer, wer ist Joachim Gauck?",
    "War der nicht mal Bundespräsident?".

%
% political predecessor
%

political_predecessor(ROLE, PERSON, PREDECESSOR) :- 
    %trace(on),
    or (ROLE is wdePresidentOfTheUnitedStatesOfAmerica,
        ROLE is wdeFederalChancellorOfGermany,
        ROLE is wdePresidentOfGermany),

    wdpPositionHeld(PERSON, OFFICE_STMT),
    wdpsPositionHeld(OFFICE_STMT, ROLE),
    wdpqReplaces(OFFICE_STMT, PREDECESSOR),
    not(is(PERSON, PREDECESSOR)).

answer_politician_predecessor_tokens(en, TS, TE) :-

    ner (en, human, TS, TE, C:tokens, HUMAN, SCORE),

    C:mem|f1ent is HUMAN,
    r_score(C, SCORE),

    rdfsLabel(HUMAN, en, HLABEL),

    political_predecessor(ROLE, HUMAN, PREDECESSOR),

    r_score(C, 100.0),

    C:mem|f1pat is PREDECESSOR,
    rdfsLabel(PREDECESSOR, en, PREDLABEL),

    or ("{PREDLABEL,s} was the predecessor of {HLABEL,s}, I think.",
        "I believe {HLABEL,s} was preceeded by {PREDLABEL,s}.").

answer_politician_predecessor_tokens(de, TS, TE) :-

    ner (de, human, TS, TE, C:tokens, HUMAN, SCORE),

    C:mem|f1ent is HUMAN,
    r_score(C, SCORE),

    rdfsLabel(HUMAN, de, HLABEL),

    political_predecessor(ROLE, HUMAN, PREDECESSOR),

    r_score(C, 100.0),

    C:mem|f1pat is PREDECESSOR,
    rdfsLabel(PREDECESSOR, de, PREDLABEL),

    if is_male(PREDECESSOR) then
        or ("{PREDLABEL,s} war der Vorgänger von {HLABEL,s}, denke ich.",
            "Ich glaube der Vorgänger von {HLABEL,s} war {PREDLABEL,s}.")
    else
        or ("{PREDLABEL,s} war die Vorgängerin von {HLABEL,s}, denke ich.",
            "Ich glaube die Vorgängerin von {HLABEL,s} war {PREDLABEL,s}.")
    endif.

train(en) :-
    "who (is|was|happened to be) the predecessor of {known_politicians:LABEL} (by the way|) ?",
    inline answer_politician_predecessor_tokens(en, tstart(known_politicians), tend(known_politicians)).
 
train(de) :-
    "wer (ist|war) (eigentlich|) (die vorgängerin|der vorgänger) von {known_politicians:LABEL} ?",
    inline answer_politician_predecessor_tokens(de, tstart(known_politicians), tend(known_politicians)).
 
test(en, t0012) :-
    "who happened to be the predecessor of Ronald Reagan?",
    "I believe Ronald Reagan was preceeded by Jimmy Carter.".
 
test(de, t0013) :-
    "wer war eigentlich der vorgänger von Ronald Reagan?",
    "Ich glaube der Vorgänger von Ronald Reagan war Jimmy Carter".
 
test(en, t0014) :-
    "who happened to be the predecessor of Helmut Kohl?",
    "I believe Helmut Kohl was preceeded by Helmut Schmidt.".

test(de, t0015) :-
    "wer war eigentlich der vorgänger von Helmut Kohl?",
    "Ich glaube der Vorgänger von Helmut Kohl war Helmut Schmidt.".

test(en, t0016) :-
    "who happened to be the predecessor of Richard von Weizsäcker?",
    "I believe Richard von Weizsäcker was preceeded by Karl Carstens.".

test(de, t0017) :-
    "wer war eigentlich der vorgänger von Richard von Weizsäcker?",
    "Ich glaube der Vorgänger von Richard von Weizsäcker war Karl Carstens.".

%
% political successor
%

political_successor(ROLE, PERSON, SUCCESSOR) :- 
    %trace(on),
    or (ROLE is wdePresidentOfTheUnitedStatesOfAmerica,
        ROLE is wdeFederalChancellorOfGermany,
        ROLE is wdePresidentOfGermany),

    wdpPositionHeld(PERSON, OFFICE_STMT),
    wdpsPositionHeld(OFFICE_STMT, ROLE),
    wdpqReplacedBy(OFFICE_STMT, SUCCESSOR),
    not(is(PERSON, SUCCESSOR)).

answer_politician_successor_tokens(en, TS, TE) :-

    ner (en, human, TS, TE, C:tokens, HUMAN, SCORE),

    C:mem|f1ent is HUMAN,
    r_score(C, SCORE),

    rdfsLabel(HUMAN, en, HLABEL),

    political_successor(ROLE, HUMAN, SUCCESSOR),

    r_score(C, 100.0),

    C:mem|f1pat is SUCCESSOR,
    rdfsLabel(SUCCESSOR, en, SUCCLABEL),

    or ("{SUCCLABEL,s} was the successor of {HLABEL,s}, I think.",
        "I believe {HLABEL,s} was succeeded by {SUCCLABEL,s}.").

answer_politician_successor_tokens(de, TS, TE) :-

    ner (de, human, TS, TE, C:tokens, HUMAN, SCORE),

    C:mem|f1ent is HUMAN,
    r_score(C, SCORE),

    rdfsLabel(HUMAN, de, HLABEL),

    political_successor(ROLE, HUMAN, SUCCESSOR),

    r_score(C, 100.0),

    C:mem|f1pat is SUCCESSOR,
    rdfsLabel(SUCCESSOR, de, SUCCLABEL),

    if is_male(SUCCESSOR) then
        or ("{SUCCLABEL,s} war der Nachfolger von {HLABEL,s}, denke ich.",
            "Ich glaube der Nachfolger von {HLABEL,s} war {SUCCLABEL,s}.")
    else
        or ("{SUCCLABEL,s} war die Nachfolgerin von {HLABEL,s}, denke ich.",
            "Ich glaube die Nachfolgerin von {HLABEL,s} war {SUCCLABEL,s}.")
    endif.

train(en) :-
    "who (is|was|happened to be) the successor of {known_politicians:LABEL} (by the way|) ?",
    inline answer_politician_successor_tokens(en, tstart(known_politicians), tend(known_politicians)).

train(de) :-
    "wer (ist|war) (eigentlich|) (die nachfolgerin|der nachfolger) von {known_politicians:LABEL} ?",
    inline answer_politician_successor_tokens(de, tstart(known_politicians), tend(known_politicians)).

test(en, t0018) :-
    "who happened to be the successor of Ronald Reagan?",
    "george h w bush was the successor of ronald reagan i think".

test(de, t0019) :-
    "wer war eigentlich der nachfolger von Ronald Reagan?",
    "george h w bush war der nachfolger von ronald reagan denke ich".

test(en, t0020) :-
    "who happened to be the successor of Helmut Kohl?",
    "gerhard schröder was the successor of helmut kohl i think".

test(de, t0021) :-
    "wer war eigentlich der nachfolger von Helmut Kohl?",
    "gerhard schröder war der nachfolger von helmut kohl denke ich".

test(en, t0022) :-
    "who happened to be the successor of Richard von Weizsäcker?",
    "roman herzog was the successor of richard von weizsäcker i think".

test(de, t0023) :-
    "wer war eigentlich der nachfolger von Richard von Weizsäcker?",
    "roman herzog war der nachfolger von richard von weizsäcker denke ich".

