%prolog

%
% very basic geo location predicates
%

geo_location_category (wdeCity).
geo_location_category (wdeMunicipality).
geo_location_category (wdeGeographicRegion).
geo_location_category (wdeMunicipalityOfGermany).
geo_location_category (wdeHumanSettlement).
geo_location_category (wdeBigCity).
geo_location_category (wdeGeographicLocation).
geo_location_category (wdeLocation).
geo_location_category (wdeCapital).

geo_location (LOC) :-
    geo_location_category(CAT),
    wdpdInstanceOf(LOC, CAT).

% geo_locations (S)  :- set_findall(LOC, geo_location_rdf(LOC), S).
% 
% geo_location (LOC) :- geo_locations(S), set_get(S, LOC).

%
% geo location macros
%

% nlp_geo_location_s(en, S, LOCATION, LABEL, TSTART, TEND) :-
%     geo_location(LOCATION),
%     rdf (limit(1),
%          LOCATION, rdfs:label, LABEL,
%          filter(lang(LABEL) = 'en')),
%     length(S, TSTART),
%     hears (en, S, LABEL),
%     length(S, TEND).
% 
% nlp_geo_location_s(de, S, LOCATION, LABEL, TSTART, TEND) :-
%     geo_location(LOCATION),
%     rdf (limit(1),
%          LOCATION, rdfs:label, LABEL,
%          filter(lang(LABEL) = 'de')),
%     length(S, TSTART),
%     hears (de, S, LABEL),
%     length(S, TEND).

macro(en, geo_location, LABEL) :- 
    geo_location(LOC), 
    rdfsLabel(LOC, en, LABEL).
macro(de, geo_location, LABEL) :- 
    geo_location(LOC), 
    rdfsLabel(LOC, de, LABEL).

%
% named entity recognition (NER)
%

train_ner (en, geo_location, LOC, LABEL) :- geo_location(LOC), rdfsLabel(LOC, en, LABEL).
train_ner (de, geo_location, LOC, LABEL) :- geo_location(LOC), rdfsLabel(LOC, de, LABEL).

