%prolog

train_prefix('{self_address:L} ').

%
% time questions
%

get_topic_label(C, en, "the time") :- mem(C, topic, wdeTime), r_score(C, 10).
get_topic_label(C, de, "die Uhrzeit")   :- mem(C, topic, wdeTime), r_score(C, 10).

answer_time(en) :-
    % trace(on),
    set (C:mem|topic, wdeTime),
    transcribe_time (en, C:time, TS),
    r_score(C, 100.0),

    or("It is {TS,s}", 
       "It is now {TS,s}", 
       "The time is {TS,s}", 
       "The time is now {TS,s}").

answer_time(de) :-
    % trace(on),
    set (C:mem|topic, wdeTime),
    transcribe_time (de, C:time, TS),
    r_score(C, 100.0),

    or("Es ist {TS,s}", 
       "Es ist jetzt {TS,s}", 
       "Wir haben es {TS,s}", 
       "Die Uhrzeit ist {TS,s}").

train(en) :-
    "do you know what time it is (now|)",
    inline answer_time(en).
train(en) :-
    "what time is it (now|)",
    inline answer_time(en).
train(en) :-
    "what's the time (now|)?",
    inline answer_time(en).

train(de) :-
    "weißt du wie spät es ist",
    inline answer_time(de).
train(de) :-
    "wieviel uhr ist es",
    inline answer_time(de).
train(de) :-
    "wieviel uhr haben wir",
    inline answer_time(de).
train(de) :-
    "wie spät ist es",
    inline answer_time(de).

%     p1 = [ "import dateutil.parser ; ias['currentTime'] = dateutil.parser.parse('2017-06-12T06:30:00+01:00')" ]
%     p2 = [ "import dateutil.parser ; ias['currentTime'] = dateutil.parser.parse('2017-02-08T13:15:00+01:00')" ]

test(en, time1) :- set(C:time, '2017-06-12T06:30:00+01:00'), "what time is it", "It is half past 7.".
test(en, time2) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what time is it", "It is a quarter past 1.".
test(en, time3) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what time is it", "It is a quarter past 1.".
test(en, time3) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what time is it", "It is a quarter past 1.", "what was our topic?", "Our topic was the time, I believe.".
test(de, time4) :- set(C:time, '2017-06-12T06:30:00+01:00'), "wie spät ist es", "Es ist eine halbe Stunde nach 7.".
test(de, time5) :- set(C:time, '2017-02-08T13:15:00+01:00'), "wie spät ist es", "Es ist viertel nach 1.".
test(de, time6) :- set(C:time, '2017-02-08T13:15:00+01:00'), "wie spät ist es", "Es ist viertel nach 1.".
test(de, time6) :- set(C:time, '2017-02-08T13:15:00+01:00'), "wie spät ist es", "Es ist viertel nach 1.", "worüber haben wir gesprochen?", "Ich denke, unser Thema war die Uhrzeit.".

%
% date questions
%

% def nlp_dt_date_r (lang, r):
% 
%     if lang == 'en':
% 
%         return [ says ('en', r, u'The date is %(f1_wday_label)s %(f1_month_label)s %(f1_day)d, %(f1_year)d'),
%                  says ('en', r, u'Today is %(f1_wday_label)s %(f1_month_label)s %(f1_day)d, %(f1_year)d'),
%                ] 
% 
%     elif lang == 'de':
% 
%         return [ says ('de', r, u'Das Datum ist %(f1_wday_label)s der %(f1_day_label)s %(f1_month_label)s %(f1_year)d'),
%                  says ('de', r, u'Heute ist %(f1_wday_label)s der %(f1_day_label)s %(f1_month_label)s %(f1_year)d'),
%                ]
% 
%     else:
%         raise Exception ('unsupported language: %s' % lang)
%     
% def nlp_dt_topic_date_r (lang, r):
% 
%     if lang == 'en':
% 
%         return [ says ('en', r, 'We were talking about the date'),
%                  says ('en', r, 'The date was our topic') ]
% 
%     elif lang == 'de':
% 
%         return [ says ('de', r, 'Wir haben über das Datum gesprochen'),
%                  says ('de', r, 'Das Datum war unser Thema'),
%                ] 
% 
%     else:
%         raise Exception ('unsupported language: %s' % lang)
% 
% def nlp_dt_en_start_date(kernal, res):
% 
%     g = [
% 
%         "t = ias['currentTime']",
% 
%         "ias['f1_type']        = 'question'",
%         "ias['f1_topic']       = 'date'",
% 
%         "ias['f1_day']         = t.day",
%         "ias['f1_month']       = t.month",
%         "ias['f1_year']        = t.year",
% 
%         "from base.time import NLP_DAY_OF_THE_WEEK_LABEL, NLP_MONTH_LABEL",
% 
%         "ias['f1_wday_label']  = NLP_DAY_OF_THE_WEEK_LABEL[ias['lang']][t.weekday()]",
%         "ias['f1_month_label'] = NLP_MONTH_LABEL[ias['lang']][t.month]",
% 
%         "from num2words import num2words",
% 
%         "ias['f1_day_label']   = num2words(t.day, ordinal=True, lang=ias['lang'])",
% 
% 
%         ]
% 
%     # single-round training
% 
%     for ts in nlp_dt_train_date_ts():
% 
%         p1 = [ "import dateutil.parser ; ias['currentTime'] = dateutil.parser.parse('%s')" % ts.isoformat() ]
% 
%         for lang in ['en', 'de']:
%             s = []
%             for s1 in nlp_base_self_address_s(kernal, lang, s):
%                 for s2 in nlp_dt_date_s(lang, s1):
%                     for r1 in nlp_dt_date_r(lang, []):
%                         res.append((lang, [p1, s2, g, r1]))
% 
%     # multi-round / followup
% 
%     for ts in nlp_dt_train_date_ts_small:
% 
%         p1 = [ "import dateutil.parser ; ias['currentTime'] = dateutil.parser.parse('%s')" % ts.isoformat() ]
% 
%         for lang in ['en', 'de']:
%             s1_1 = []
%             for s1_2 in nlp_base_self_address_s(kernal, lang, s1_1):
%                 for s1_2 in nlp_dt_date_s(lang, s1_1):
% 
%                     for r1 in nlp_dt_date_r(lang, []):
% 
%                         for s2 in nlp_base_whatwasourtopic_s(lang, []):
%                             for r2 in nlp_dt_topic_date_r(lang, []):
%                                 res.append((lang, [p1, s1_2, g, r1, p1, s2, [], r2]))
% 
%                         for s2 in nlp_base_sayagain_s(lang, []):
%                             for r2_1 in nlp_base_isaid_r(lang, []):
%                                 for r2_2 in nlp_dt_date_r(lang, r2_1):
%                                     res.append((lang, [p1, s1_2, g, r1, p1, s2, [], r2_2]))
% 
% def nlp_train (kernal):
% 
%     res = []
% 
%     nlp_dt_en_start_time(kernal, res)
%     nlp_dt_en_start_date(kernal, res)
% 
%     return res

get_topic_label(C, en, "the date") :- mem(C, topic, wdeDate), r_score(C, 10).
get_topic_label(C, de, "das Datum")   :- mem(C, topic, wdeDate), r_score(C, 10).

answer_date(en) :-
    % trace(on),
    set (C:mem|topic, wdeDate),
    transcribe_date (en, dativ, C:time, TS),
    transcribe_wday_ts (en, C:time, WDS),
    r_score(C, 100.0),

    or("The date is {WDS,s}, {TS,s}", 
       "Today is {WDS,s}, {TS,s}"). 

answer_date(de) :-
    % trace(on),
    set (C:mem|topic, wdeDate),
    transcribe_date (de, dativ, C:time, TS),
    transcribe_wday_ts (de, C:time, WDS),
    r_score(C, 100.0),

    "Wir haben {WDS,s} den {TS,s}.".

train(en) :-
    "do you know what (date|day) it is (today|now|)",
    inline answer_date(en).
train(en) :-
    "what (date|day) is it (today|now|)",
    inline answer_date(en).
train(en) :-
    "what's the date (now|today|)?",
    inline answer_date(en).

train(de) :-
    "weißt du (welchen Tag|welches Datum) wir (heute|) haben?",
    inline answer_date(de).
train(de) :-
    "(welchen tag|welches datum) haben wir (heute|)",
    inline answer_date(de).
train(de) :-
    "was ist heute für ein (tag|datum)?",
    inline answer_date(de).
train(de) :-
    "welchen haben wir heute",
    inline answer_date(de).

test(en, date1) :- set(C:time, '2017-06-12T06:30:00+01:00'), "what date is it", "The date is Monday June 12, 2017.".
test(en, date2) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what date is it", "The date is Wednesday February 8, 2017".
test(en, date3) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what date is it", "The date is Wednesday February 8, 2017".
test(en, date3) :- set(C:time, '2017-02-08T13:15:00+01:00'), "what date is it", "The date is Wednesday February 8, 2017", "what was our topic?", "We have been talking about the date, I think.".
test(de, date4) :- set(C:time, '2017-06-12T06:30:00+01:00'), "Welchen Tag haben wir heute?", "Wir haben Montag den zwölften Juni 2017".
test(de, date5) :- set(C:time, '2017-02-08T13:15:00+01:00'), "Welchen Tag haben wir heute?", "Wir haben Mittwoch den achten Februar 2017".
test(de, date6) :- set(C:time, '2017-02-08T13:15:00+01:00'), "Welchen Tag haben wir heute?", "Wir haben Mittwoch den achten Februar 2017".
test(de, date6) :- set(C:time, '2017-02-08T13:15:00+01:00'), "Welchen Tag haben wir heute?", "Wir haben Mittwoch den achten Februar 2017", "worüber haben wir gesprochen?", "Sprachen wir nicht über das Datum?".

