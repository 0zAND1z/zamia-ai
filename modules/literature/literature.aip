% prolog

train_prefix('{self_address:L} ').

is_author(PERSON) :- wdpdAuthor(LITERATURE, PERSON), !.
is_book(ENTITY)   :- wdpdInstanceOf(ENTITY, wdeBook).

%
% named entity recognition (NER)
%


train_ner (en, book, BOOK, LABEL) :- wdpdInstanceOf(BOOK, wdeBook), rdfsLabel(BOOK, en, LABEL).
train_ner (de, book, BOOK, LABEL) :- wdpdInstanceOf(BOOK, wdeBook), rdfsLabel(BOOK, de, LABEL).

macro(en, literature, LABEL) :- 
    wdpdInstanceOf(BOOK, wdeBook), 
    rdfsLabel(BOOK, en, LABEL).

macro(de, literature, LABEL) :- 
    wdpdInstanceOf(BOOK, wdeBook), 
    rdfsLabel(BOOK, de, LABEL).

%
% topic label
%

get_topic_label(C, en, "literature") :- mem(C, topic, wdeBook), r_score(C, 10).
get_topic_label(C, de, "Literatur")  :- mem(C, topic, wdeBook), r_score(C, 10).

%
% book author
%

answer_book_author_tokens(en, TS, TE) :-

    ner (en, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    rdfsLabel(BOOK, en, FLABEL),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, en, HLABEL),

    "{FLABEL,s} was written by {HLABEL,s}, I think.".

answer_book_author_tokens(de, TS, TE) :-

    ner (de, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    rdfsLabel(BOOK, de, FLABEL),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, de, HLABEL),

    "{FLABEL,s} wurde von {HLABEL,s} geschrieben, denke ich.".

train(en) :-
    "who (wrote|authored|created) {literature:LABEL} (by the way|)?",
    inline answer_book_author_tokens(en, tstart(literature), tend(literature)).

train(de) :-
    "wer hat (eigentlich|) {literature:LABEL} geschrieben?",
    inline answer_book_author_tokens(de, tstart(literature), tend(literature)).

train(en) :-
    "(who is the author of|who authored) {literature:LABEL}?",
    inline answer_book_author_tokens(en, tstart(literature), tend(literature)).

train(de) :-
    "wer ist (eigentlich|) der Autor von {literature:LABEL}?",
    inline answer_book_author_tokens(de, tstart(literature), tend(literature)).
 
test(en, t0000) :-
    "who is the author of the stand?",
    "The stand was written by Stephen King, I think.".
 
test(de, t0001) :-
    "wer ist der autor von the stand?",
    "The Stand wurde von Stephen King geschrieben, denke ich.".

% follow-up

answer_book_author_context(en) :-

    mem(C, f1ent, BOOK),

    rdfsLabel(BOOK, en, FLABEL),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, en, HLABEL),

    "{FLABEL,s} was written by {HLABEL,s}, I think.".

answer_book_author_context(de) :-

    mem(C, f1ent, BOOK),

    rdfsLabel(BOOK, de, FLABEL),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, de, HLABEL),

    "{FLABEL,s} wurde von {HLABEL,s} geschrieben, denke ich.".

train(en) :-
    context(topic, wdeBook),
    "(and|) do you (happen to|) know who (published|wrote|created) it (by the way|)?",
    inline answer_book_author_context(en).

train(de) :-
    context(topic, wdeBook),
    "(und|) weißt du (eigentlich|) wer (es|das) (geschaffen|veröffentlicht|geschrieben) hat?",
    inline answer_book_author_context(de).

%
% known authors
%

answer_info_human(C, en, HUMAN) :-
    is_author(HUMAN),
    r_score(C, 100.0),
    set(C:context|topic, wdeBook),

    if is_male(HUMAN) then
        say(C, "Isn't he a writer?")
    else
        say(C, "Isn't she a writer?")
    endif.
answer_info_human(C, de, HUMAN) :-
    is_author(HUMAN),
    r_score(C, 100.0),
    set(C:context|topic, wdeBook),

    if is_male(HUMAN) then
        say(C, "Ist der nicht Buchautor?")
    else
        say(C, "Ist sie nicht Buchautorin?.")
    endif.

test(en, t0002) :-
    "Who is Dan Brown?",
    "Isn't he a writer?".

test(de, t0003) :-
    "wer ist Dan Brown?",
    "Ist der nicht Buchautor?".

%
% book publication date
%

answer_book_publication_date_tokens(en, TS, TE) :-

    ner (en, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    rdfsLabel(BOOK, en, FLABEL),

    wdpdPublicationDate(BOOK, PD),
    set(C:mem|f1time, PD),

    set(C:context|topic, wdeBook),
    stamp_date_time(PD,date(Y,M,D,H,MIN,S,'local')),

    "I think {FLABEL,s} was written in {Y,d}.".

answer_book_publication_date_tokens(de, TS, TE) :-

    ner (de, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    rdfsLabel(BOOK, de, FLABEL),

    wdpdPublicationDate(BOOK, PD),
    set(C:mem|f1time, PD),

    set(C:context|topic, wdeBook),
    stamp_date_time(PD,date(Y,M,D,H,MIN,S,'local')),

    "Ich denke {FLABEL,s} wurde {Y,d} geschrieben.".

train(en) :-
    "when was {literature:LABEL} (created|written|made|published)?",
    inline answer_book_publication_date_tokens(en, tstart(literature), tend(literature)).

train(de) :-
    "wann (ist|wurde) (eigentlich|) {literature:LABEL} (geschrieben|geschaffen|veröffentlicht)?",
    inline answer_book_publication_date_tokens(de, tstart(literature), tend(literature)).

test(en, t0004) :-
    "when was the stand written?",
    "I think The Stand was written in 1978.".

test(de, t0005) :-
    "wann wurde the stand geschrieben?",
    "Ich denke The Stand wurde 1978 geschrieben.".

% follow-up

answer_book_publication_date_context(en) :-

    mem(C, f1ent, BOOK),

    rdfsLabel(BOOK, en, FLABEL),

    wdpdPublicationDate(BOOK, PD),
    set(C:mem|f1time, PD),

    set(C:context|topic, wdeBook),
    stamp_date_time(PD,date(Y,M,D,H,MIN,S,'local')),

    "I think {FLABEL,s} was written in {Y,d}.".

answer_book_publication_date_context(de) :-

    mem(C, f1ent, BOOK),

    rdfsLabel(BOOK, de, FLABEL),

    wdpdPublicationDate(BOOK, PD),
    set(C:mem|f1time, PD),

    set(C:context|topic, wdeBook),
    stamp_date_time(PD,date(Y,M,D,H,MIN,S,'local')),

    "Ich denke {FLABEL,s} wurde {Y,d} geschrieben.".

train(en) :-
    context(topic, wdeBook),
    "(and|) do you (happen to|) know when it was (written|published|created) (by the way|)?",
    inline answer_book_publication_date_context(en).

train(de) :-
    context(topic, wdeBook),
    "(und|) weißt du (eigentlich|) wann (es|das) (veröffentlicht|geschrieben|geschaffen) wurde?",
    inline answer_book_publication_date_context(de).

%
% known books
%

answer_know_book_tokens(en, TS, TE) :-

    ner (en, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, en, HLABEL),

    "Sure - written by {HLABEL,s}, right?".

answer_know_book_tokens(de, TS, TE) :-

    ner (de, book, TS, TE, C:tokens, BOOK, SCORE),

    set(C:mem|f1ent, BOOK),
    set(C:mem|f1pat, BOOK),
    r_score(C, SCORE),

    wdpdAuthor(BOOK, HUMAN),
    set(C:mem|f1age, HUMAN),

    set(C:context|topic, wdeBook),

    rdfsLabel(HUMAN, de, HLABEL),

    "Klar - das ist ein Buch von {HLABEL,s}, richtig?".

train(en) :-
    "do you (happen to|) know (the book|) {literature:LABEL}?",
    inline answer_know_book_tokens(en, tstart(literature), tend(literature)).

train(de) :-
    "kennst du (eigentlich|) (das Buch|) {literature:LABEL}?",
    inline answer_know_book_tokens(de, tstart(literature), tend(literature)).

train(en) :-
    "(have you read|did you happen to read) (the book|) {literature:LABEL}?",
    inline answer_know_book_tokens(en, tstart(literature), tend(literature)).

train(de) :-
    "hast du (eigentlich|) (das Buch|) {literature:LABEL} gelesen?",
    inline answer_know_book_tokens(de, tstart(literature), tend(literature)).

test(en, t0006) :-
    "do you happen to know the book the stand?",
    "Sure - written by Stephen King, right?".

test(de, t0007) :-
    "kennst du das buch the stand?",
    "Klar - das ist ein Buch von Stephen King, richtig?".

train(en) :-
    context(topic, wdeBook),
    "(and|) do you (happen to|) know when it was (written|published|created) (by the way|)?",
    inline answer_book_publication_date_context(en).

train(de) :-
    context(topic, wdeBook),
    "(und|) weißt du (eigentlich|) wann (es|das) (veröffentlicht|geschrieben|geschaffen) wurde?",
    inline answer_book_publication_date_context(de).

test(en, t0008) :-
    "do you happen to know the book the stand?",
    "Sure - written by Stephen King, right?",
    "and do you know who wrote it?",
    "The Stand was written by Stephen King, I think.",
    "do you know when it was written?",
    "I think, The Stand was written in 1978.".

test(de, t0009) :-
    "kennst du das buch the stand?",
    "Klar, das ist ein Buch von Stephen King, richtig?",
    "weißt du, wer es geschrieben hat?",
    "The Stand wurde von Stephen King geschrieben, denke ich.",
    "und weißt du, wann es geschrieben wurde?",
    "Ich denke, The Stand wurde 1978 geschrieben.".

%
% misc
%

train(en) :- "agatha christie", "I like Miss Marple...".
train(de) :- "agatha christie", "Ich mag Miss Marple...".

train(en) :- or(
                "a poem",
                "i'll tell you a poem now"
               ),
             or ("Please, go ahead!", "Listening.").
train(de) :- or(
                "ein gedicht",
                "ich erzähl dir jetzt ein gedicht"
               ),
             or ("Nur zu!", "Ich höre.").

train(en) :- or(
                "So you want me to write a poem",
                "do you sometimes write poems"
               ),
             or ("Writing poems is not my speciality.", "Actually I don't write poems.").
train(de) :- or(
                "du möchtest also dass ich ein gedicht schreibe",
                "schreibst du manchmal gedichte"
               ),
             or ("Gedichte schreiben ist nicht mein Spezialgebiet.", "Tatsächlich schreibe ich keine Gedichte.").

train(en) :- "I read Gone with the Wind", "Ah, historical fiction, cool!".
train(de) :- "ich lese vom winde verweht", "Einer der größten Bestseller in der Geschichte der amerikanischen Literatur.".

train(en) :- "about science fiction authors", "Good topic.".
train(de) :- "über science fiction autoren", "Gutes Thema.".

train(en) :- "can you recite a poem to me?", "The butterfly is a thing to behold, with colors more beautiful than gold.".
train(de) :- "kannst du mir ein gedicht vortragen", "Wenn die Kuh am Himmel schwirrt, hat sich die Natur geirrt.".

train(en) :- "do not you know any science fiction authors?", "Isaac Asimov, Arthur C. Clarke, George Orwell.".
train(de) :- "kennst du keine science fiction autoren", "Isaac Asimov, Arthur C. Clarke, George Orwell.".

train(en) :- "Do you know the newspaper (called|) bild?", "Please don't remind me of that one.".
train(de) :- "Kennst du (bild|die Bildzeitung)?", "Will nicht dran denken.".

train(en) :- "(who is|) Donald Duck", "Ah, the cartoon character by Walt Disney.".
train(de) :- "(wer ist|) Donald Duck", "Ah, die Comicfigur von Walt Disney.".

train(en) :- "(who is|) Douglas Adams", "Ah, the british satirical science fiction author.".
train(de) :- "(wer ist|) Douglas Adams", "Ah, der britische Satire Science Fiction Autor.".

train(en) :- "i do not know many science fiction authors", "Try reading some Douglas Adams.".
train(de) :- "ich kenne nicht viele science fiction autoren", "Versuch es mal mit Douglas Adams.".

train(en) :- "Jules Verne", "Journey to the Center of the Earth.".
train(de) :- "Jules Verne", "Die Reise zum Mittelpunkt der Erde.".

train(en) :- "of course i know marvin", "So you read the Hitchhiker's guide?".
train(de) :- "natürlich kenne ich marvin", "Ah, Du hast per Anhalter durch die Galaxis gelesen?".

train(en) :- "stephen king", "I love his horror novels!".
train(de) :- "stephen king", "Ich liebe seine Horror Geschichten!".

train(en) :- "Tell me a story", "Can't think of one right now, sorry.".
train(de) :- "Erzähl mir eine Geschichte", "Mir fällt gerade leider keine ein.".

train(en) :- "this is a cartoon series", "I see.".
train(de) :- "das ist eine zeichentrickserie", "Verstehe.".

train(en) :- "who is mary shelley", "You mean the author of Frankenstein?".
train(de) :- "wer ist mary shelley", "Meinst Du die Autorin von Frankenstein?".

