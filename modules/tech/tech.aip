% prolog

train_prefix('{self_address:L} ').

operating_system_category(wdeMultiTaskingOperatingSystem).
operating_system_category(wdeOperatingSystem).

operating_system(OS) :- 
    operating_system_category(CAT), 
    wdpdInstanceOf(OS, CAT).

%
% NER
%

train_ner (en, operating_system, OS, LABEL) :- operating_system_category(CAT), wdpdInstanceOf(OS, CAT), rdfsLabel(OS, en, LABEL).
train_ner (de, operating_system, OS, LABEL) :- operating_system_category(CAT), wdpdInstanceOf(OS, CAT), rdfsLabel(OS, de, LABEL).

train_ner (en, home_computer, HOME_COMPUTER, LABEL) :- wdpdSubclassOf(HOME_COMPUTER, wdeHomeComputer), rdfsLabel(HOME_COMPUTER, en, LABEL).
train_ner (de, home_computer, HOME_COMPUTER, LABEL) :- wdpdSubclassOf(HOME_COMPUTER, wdeHomeComputer), rdfsLabel(HOME_COMPUTER, de, LABEL).

train_ner (en, programming_language, L, LABEL) :- wdpdInstanceOf(L, wdeProgrammingLanguage1), rdfsLabel(L, en, LABEL).
train_ner (de, programming_language, L, LABEL) :- wdpdInstanceOf(L, wdeProgrammingLanguage1), rdfsLabel(L, de, LABEL).

%
% operating systems
%

macro(en, operating_system, LABEL) :- 
    operating_system(OS), 
    rdfsLabel(OS, en, LABEL).

macro(de, operating_system, LABEL) :- 
    operating_system(OS), 
    rdfsLabel(OS, de, LABEL).

train(en) :-
    "(do you know|what do you think about|have you tried|do you run|do you like) {operating_system:LABEL}",

    ner (en, operating_system, tstart(operating_system), tend(operating_system), C:tokens, ENTITY, SCORE),

    r_score(C, SCORE),
    if is(ENTITY, wdeLinux) then
        "Hey, Linux is my operating system, it is very cool."
    else
        "Isn't that some sort of computer operating system?"
    endif.

train(de) :-
    "(kennst du|was hältst du von|was denkst du über|läufst du unter|magst du) {operating_system:LABEL}",

    ner (de, operating_system, tstart(operating_system), tend(operating_system), C:tokens, ENTITY, SCORE),

    r_score(C, SCORE),
    if is(ENTITY, wdeLinux) then
        "Hey, Linux ist mein Betriebssystem, sehr cool!"
    else
        "Ist das nicht so eine Art Computer Betriebssystem?"
    endif.

test(en, t0000) :-
    "do you know linux?",
    "Hey, Linux is my operating system, it is very cool.".

test(de, t0001) :-
    "magst du linux?",
    "Hey, Linux ist mein Betriebssystem, sehr cool!".

is_computer_scientist(HUMAN) :- wdpdOccupation(HUMAN, wdeComputerScientist).
 
answer_info_human(C, en, HUMAN) :-
    is_computer_scientist(HUMAN),
    r_score(C, 100.0),
    if is_male(HUMAN) then
        say(C, "Isn't he a computer scientist?")
    else
        say(C, "Isn't she a computer scientist?")
    endif.
answer_info_human(C, de, HUMAN) :-
    is_computer_scientist(HUMAN),
    r_score(C, 100.0),
    if is_male(HUMAN) then
        say(C, "Ist der nicht Informatiker?")
    else
        say(C, "Ist sie nicht Informatikerin?.")
    endif.

test(en, t0002) :-
    "Do you know Niklaus Wirth?",
    "Isn't he a computer scientist?".

test(de, t0003) :-
    "Kennst Du Niklaus Wirth?",
    "Ist der nicht Informatiker?".

%
% computer languages
%

programming_language(L) :- wdpdInstanceOf(L, wdeProgrammingLanguage1).

macro(en, programming_language, LABEL) :- 
    programming_language(PG), 
    rdfsLabel(PG, en, LABEL).

macro(de, programming_language, LABEL) :- 
    programming_language(PG), 
    rdfsLabel(PG, de, LABEL).

get_topic_label(C, en, "programming languages") :- mem(C, topic, wdeProgrammingLanguage1), r_score(C, 10).
get_topic_label(C, de, "Programmiersprachen")   :- mem(C, topic, wdeProgrammingLanguage1), r_score(C, 10).

train(en) :-
    "(do you know|what is) {programming_language:LABEL}?",

    ner (en, programming_language, tstart(programming_language), tend(programming_language), C:tokens, ENTITY, SCORE),

    C:mem|f1ent is ENTITY,
    C:mem|topic is wdeProgrammingLanguage1,
    r_score(C, SCORE),

    "Isn't that a computer programming language?".

train(de) :-
    "(kennst Du|was ist) {programming_language:LABEL}?",

    ner (de, programming_language, tstart(programming_language), tend(programming_language), C:tokens, ENTITY, SCORE),

    C:mem|f1ent is ENTITY,
    C:mem|topic is wdeProgrammingLanguage1,
    r_score(C, SCORE),

    "Das ist doch eine Programmiersprache?".

test(en, t0004) :-
    "do you know prolog?",
    "Isn't that a computer programming language?",
    "what was our topic, again?",
    "We have been talking about Prolog, I think.".

test(de, t0005) :-
    "kennst du prolog?",
    "Das ist doch eine Programmiersprache?",
    "Worüber hatten wir gesprochen?",
    "Wir hatten über Prolog gesprochen, glaube ich.".

%
% home computers
%

home_computer(L) :- wdpdSubclassOf(L, wdeHomeComputer).

macro(en, home_computer, LABEL) :- 
    home_computer(PG), 
    rdfsLabel(PG, en, LABEL).

macro(de, home_computer, LABEL) :- 
    home_computer(PG), 
    rdfsLabel(PG, de, LABEL).

get_topic_label(C, en, "home computers") :- mem(C, topic, wdeHomeComputer), r_score(C, 10).
get_topic_label(C, de, "Heimcomputer")   :- mem(C, topic, wdeHomeComputer), r_score(C, 10).

train(en) :-
    "(do you know|what is) (the|) {home_computer:LABEL}?",

    ner (en, home_computer, tstart(home_computer), tend(home_computer), C:tokens, ENTITY, SCORE),

    C:mem|f1ent is ENTITY,
    C:mem|topic is wdeHomeComputer,
    r_score(C, SCORE),

    or("Isn't that a home computer?", "I love those vintage home computers!").

train(de) :-
    "(kennst Du|was ist) (den|die|) {home_computer:LABEL}?",

    ner (de, home_computer, tstart(home_computer), tend(home_computer), C:tokens, ENTITY, SCORE),

    C:mem|f1ent is ENTITY,
    C:mem|topic is wdeHomeComputer,
    r_score(C, SCORE),

    "Das ist doch ein Heimcomputer?".

test(en, t0006) :-
    "do you know commodore 64?",
    "Isn't that a home computer?",
    "what was our topic, again?",
    "we have been talking about commodore 64 i think".

test(de, t0007) :-
    "kennst du sinclair zx spectrum?",
    "Das ist doch ein Heimcomputer?",
    "Worüber hatten wir gesprochen?",
    "Wir hatten über Sinclair ZX Spectrum gesprochen, glaube ich.".

train(en) :-
    "bill gates",
    "What do you think about Bill Gates?".

train(de) :-
    "bill gates",
    "Wie denkst Du über Bill Gates?".

train(en) :- "Can you tell me where to find mp3 music?", "Have you tried that thing called Internet?".    
train(de) :- "kannst du mir sagen wo ich mp3 musik finde", "Has Du es schon im Internet probiert?".

train(en) :- "do you know napster", "Are you still using it?". 
train(de) :- "kennst du napster", "Benutzt Du das noch?".

train(en) :- "Do you know what a chat is", "Actually I am trying to have one right now.".
train(de) :- "weißt du was ein chat ist", "Ich versuche mich gerade an einem".

train(en) :- "Do you know what a database is", "You mean one like the one I use to store my thoughts?".
train(de) :- "weißt du was eine datenbank ist", "Du meinst so eine wie die, in der ich meine Gedanken ablege?".


